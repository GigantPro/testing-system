"""Add module_id to task

Revision ID: f4e87ca1a376
Revises: 09cb55e25bd4
Create Date: 2023-12-03 21:57:45.335907

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4e87ca1a376'
down_revision: Union[str, None] = '09cb55e25bd4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('classinvite')
    op.drop_table('classroom')
    op.drop_table('role')
    op.drop_table('course')
    op.add_column('task', sa.Column('module_id', sa.Integer(), nullable=False))
    op.create_foreign_key(None, 'task', 'modules', ['module_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'task', type_='foreignkey')
    op.drop_column('task', 'module_id')
    op.create_table('course',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ico_url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('teachers_ids', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('passing_id', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('passed_id', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('reviews', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('course_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='course_pkey')
    )
    op.create_table('role',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='role_pkey')
    )
    op.create_table('classroom',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('classroom_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('class_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('admins', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('members', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('optins', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], name='classroom_owner_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='classroom_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('classinvite',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invite_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('class_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('works_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('creator_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invites_last', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['class_id'], ['classroom.id'], name='classinvite_class_id_fkey'),
    sa.ForeignKeyConstraint(['creator_id'], ['user.id'], name='classinvite_creator_id_fkey'),
    sa.PrimaryKeyConstraint('id', 'invite_code', name='classinvite_pkey')
    )
    # ### end Alembic commands ###
